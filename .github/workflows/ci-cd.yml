name: LANChat CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags:
      - 'v*'  # Запускается при push тегов
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'

jobs:
  # Проверка качества кода
  lint:
    name: Lint and Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v6
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pylint
          pip install -r requirements.txt

      - name: Run flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics







      - name: Run pylint
        run: |
          pylint --disable=C0114,C0116,C0115,R0903,W0621,W0612,W0611,R0801 **/*.py || true

  # Тестирование на разных версиях Python
  test:
    name: Test on Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio

      - name: Run tests
        run: |
          pytest --cov=. --cov-report=xml --cov-report=html

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # Сборка для разных платформ (только при тегах)
  build:
    name: Build for ${{ matrix.platform }}
    runs-on: ${{ matrix.os }}
    needs: [lint, test]
    if: startsWith(github.ref, 'refs/tags/')  # Только при тегах
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: Windows
            os: windows-latest
            artifact_name: LANChat-Windows.exe
          - platform: macOS
            os: macos-latest
            artifact_name: LANChat-macOS
          - platform: Linux
            os: ubuntu-latest
            artifact_name: LANChat-Linux

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v6
        with:
          python-version: '3.11'

      - name: Install system dependencies (Linux)
        if: matrix.platform == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-dev build-essential

      - name: Install system dependencies (macOS)
        if: matrix.platform == 'macOS'
        run: |
          brew install python3

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Get version from tag
        id: get_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          VERSION=${VERSION#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Build executable
        run: |
          if [ "${{ matrix.platform }}" = "Windows" ]; then
            python scripts/build_windows.py
          elif [ "${{ matrix.platform }}" = "macOS" ]; then
            python scripts/build_macos.py
          else
            python scripts/build_linux.py
          fi

      - name: Rename build artifacts
        run: |
          if [ "${{ matrix.platform }}" = "Windows" ]; then
            mv dist/LANChat.exe "dist/LANChat-Windows-${{ steps.get_version.outputs.version }}.exe"
          elif [ "${{ matrix.platform }}" = "macOS" ]; then
            mv dist/LANChat "dist/LANChat-macOS-${{ steps.get_version.outputs.version }}"
          else
            mv dist/LANChat "dist/LANChat-Linux-${{ steps.get_version.outputs.version }}"
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}-${{ steps.get_version.outputs.version }}
          path: dist/
          retention-days: 30

  # Тестирование GUI (только на Linux)
  test-gui:
    name: Test GUI
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v6
        with:
          python-version: '3.11'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-tk xvfb

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements_gui.txt
          pip install pytest pytest-qt

      - name: Test GUI components
        run: |
          xvfb-run -a python -c "
          import tkinter as tk
          from gui import LANChatGUI
          root = tk.Tk()
          app = LANChatGUI(root)
          print('GUI initialization successful')
          root.destroy()
          "

  # Автоматическое создание релиза (только при тегах)
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build, test-gui]
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version from tag
        id: get_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          VERSION=${VERSION#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        run: |
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          if [ -z "$PREVIOUS_TAG" ]; then
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges)
          else
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges $PREVIOUS_TAG..HEAD)
          fi
          
          echo "# Release ${{ steps.get_version.outputs.version }}" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "## Changes" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "$CHANGELOG" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "---" >> CHANGELOG.md
          echo "*This release was created automatically by GitHub Actions*" >> CHANGELOG.md

      - name: Download all build artifacts
        uses: actions/download-artifact@v4

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.tag }}
          release_name: Release ${{ steps.get_version.outputs.version }}
          body_path: CHANGELOG.md
          draft: false
          prerelease: false

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./LANChat-Windows.exe-${{ steps.get_version.outputs.version }}/LANChat-Windows-${{ steps.get_version.outputs.version }}.exe
          asset_name: LANChat-Windows-${{ steps.get_version.outputs.version }}.exe
          asset_content_type: application/octet-stream

      - name: Upload Release Assets (macOS)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./LANChat-macOS-${{ steps.get_version.outputs.version }}/LANChat-macOS-${{ steps.get_version.outputs.version }}
          asset_name: LANChat-macOS-${{ steps.get_version.outputs.version }}
          asset_content_type: application/octet-stream

      - name: Upload Release Assets (Linux)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./LANChat-Linux-${{ steps.get_version.outputs.version }}/LANChat-Linux-${{ steps.get_version.outputs.version }}
          asset_name: LANChat-Linux-${{ steps.get_version.outputs.version }}
          asset_content_type: application/octet-stream

      - name: Notify success
        run: |
          echo "✅ Release ${{ steps.get_version.outputs.version }} created successfully!"
          echo "🔗 Release URL: ${{ steps.create_release.outputs.html_url }}"
          echo "📦 Assets uploaded:"
          echo "  - LANChat-Windows-${{ steps.get_version.outputs.version }}.exe"
          echo "  - LANChat-macOS-${{ steps.get_version.outputs.version }}"
          echo "  - LANChat-Linux-${{ steps.get_version.outputs.version }}"
