import tkinter as tk
from tkinter import ttk, messagebox, filedialog, scrolledtext
import threading
import asyncio
import json
import os
from datetime import datetime
import queue
import shutil
import mimetypes
from pathlib import Path


# –ò–º–ø–æ—Ä—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–æ–¥—É–ª–µ–π
from discovery import DiscoveryService, initialize_discovery
from msg_server import MessageBroadcaster
import requests
import socket


class LANChatGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("LANChat - –ß–∞—Ç –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏")
        self.root.geometry("1000x700")
        self.root.configure(bg='#f0f0f0')

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        self.username = tk.StringVar(value="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        self.message_var = tk.StringVar()
        self.chat_messages = []
        self.devices = []
        self.is_chat_active = False
        self.message_queue = queue.Queue()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
        self.discovery_service = None
        self.message_broadcaster = None

        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ñ–∞–π–ª–æ–≤
        self.uploads_folder = Path("uploads")
        self.uploads_folder.mkdir(exist_ok=True)
        self.file_messages = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–∞—Ö –≤ —á–∞—Ç–µ

        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.create_widgets()
        self.setup_styles()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        if not hasattr(self, 'messages_text') or not self.messages_text:
            print("–û—à–∏–±–∫–∞: –≤–∏–¥–∂–µ—Ç messages_text –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω")
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–∏–¥–∂–µ—Ç —á–∞—Ç–∞")
            return

        # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
        self.start_services()

        # –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è GUI
        self.update_gui()

    def setup_styles(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π –¥–ª—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –≤–∏–¥–∞"""
        style = ttk.Style()
        style.theme_use('clam')

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–≤–µ—Ç–æ–≤
        style.configure('Title.TLabel', font=(
            'Arial', 16, 'bold'), foreground='#2c3e50')
        style.configure('Header.TLabel', font=(
            'Arial', 12, 'bold'), foreground='#34495e')
        style.configure('Info.TLabel', font=(
            'Arial', 10), foreground='#7f8c8d')

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–æ–∫
        style.configure('Action.TButton', font=(
            'Arial', 10, 'bold'), padding=5)
        style.configure('Success.TButton', font=(
            'Arial', 10, 'bold'), padding=5)
        style.configure('Warning.TButton', font=(
            'Arial', 10, 'bold'), padding=5)
        style.configure('Info.TButton', font=('Arial', 10, 'bold'), padding=5)

    def create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –ì–ª–∞–≤–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        title_frame = tk.Frame(self.root, bg='#3498db', height=60)
        title_frame.pack(fill='x', padx=10, pady=5)
        title_frame.pack_propagate(False)

        title_label = tk.Label(title_frame, text="LANChat", font=('Arial', 24, 'bold'),
                               fg='white', bg='#3498db')
        title_label.pack(pady=15)

        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_container = ttk.PanedWindow(self.root, orient='horizontal')
        main_container.pack(fill='both', expand=True, padx=10, pady=5)

        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –ß–∞—Ç –∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        self.create_chat_panel(main_container)

        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏ —Ñ—É–Ω–∫—Ü–∏–∏
        self.create_control_panel(main_container)

        # –°—Ç–∞—Ç—É—Å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        self.status_var = tk.StringVar(value="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        status_bar = tk.Label(self.root, textvariable=self.status_var,
                              relief='sunken', anchor='w', bg='#ecf0f1')
        status_bar.pack(side='bottom', fill='x')

    def create_chat_panel(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —á–∞—Ç–∞"""
        chat_frame = ttk.Frame(parent)
        parent.add(chat_frame, weight=2)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —á–∞—Ç–∞
        chat_header = tk.Frame(chat_frame, bg='#ecf0f1', height=40)
        chat_header.pack(fill='x', padx=5, pady=5)
        chat_header.pack_propagate(False)

        tk.Label(chat_header, text="–ß–∞—Ç", font=('Arial', 14, 'bold'),
                 bg='#ecf0f1').pack(side='left', padx=10, pady=8)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–æ–º
        self.chat_btn = ttk.Button(chat_header, text="–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è",
                                   style='Action.TButton', command=self.toggle_chat)
        self.chat_btn.pack(side='right', padx=10, pady=5)

        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —á–∞—Ç–∞
        clear_btn = ttk.Button(chat_header, text="–û—á–∏—Å—Ç–∏—Ç—å",
                               style='Warning.TButton', command=self.clear_chat)
        clear_btn.pack(side='right', padx=5, pady=5)

        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        refresh_btn = ttk.Button(chat_header, text="–û–±–Ω–æ–≤–∏—Ç—å",
                                 style='Action.TButton', command=self.force_update)
        refresh_btn.pack(side='right', padx=5, pady=5)

        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤ (–ª–∞–º–ø–æ—á–∫–∞)
        self.status_indicator = tk.Label(chat_header, text="‚óè", font=('Arial', 16, 'bold'),
                                         fg='red', bg='#ecf0f1')
        self.status_indicator.pack(side='right', padx=5, pady=5)

        # –ü–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
        self.status_indicator.bind('<Enter>', self.show_status_tooltip)
        self.status_indicator.bind('<Leave>', self.hide_status_tooltip)

        # –ö–Ω–æ–ø–∫–∞ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
        files_list_btn = ttk.Button(chat_header, text="üìÅ –§–∞–π–ª—ã",
                                    style='Success.TButton', command=self.show_files_list)
        files_list_btn.pack(side='right', padx=5, pady=5)

        # –û–±–ª–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–π
        messages_frame = tk.Frame(chat_frame)
        messages_frame.pack(fill='both', expand=True, padx=5, pady=5)

        # –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        self.messages_text = scrolledtext.ScrolledText(messages_frame, wrap='word',
                                                       font=('Arial', 10), bg='white')
        self.messages_text.pack(fill='both', expand=True)

        # –ü–∞–Ω–µ–ª—å –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        input_frame = tk.Frame(chat_frame, bg='#ecf0f1', height=60)
        input_frame.pack(fill='x', padx=5, pady=5)
        input_frame.pack_propagate(False)

        self.message_entry = tk.Entry(input_frame, textvariable=self.message_var,
                                      font=('Arial', 11), relief='solid', bd=1)
        self.message_entry.pack(side='left', fill='x',
                                expand=True, padx=(10, 5), pady=15)

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
        file_btn = ttk.Button(input_frame, text="üìé", style='Action.TButton',
                              command=self.browse_file_for_chat)
        file_btn.pack(side='left', padx=2, pady=15)

        send_btn = ttk.Button(input_frame, text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å", style='Action.TButton',
                              command=self.send_message)
        send_btn.pack(side='right', padx=(5, 10), pady=15)

        # –ü—Ä–∏–≤—è–∑–∫–∞ Enter –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        self.message_entry.bind('<Return>', lambda e: self.send_message())

    def create_control_panel(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        control_frame = ttk.Frame(parent)
        parent.add(control_frame, weight=1)

        # –í–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
        notebook = ttk.Notebook(control_frame)
        notebook.pack(fill='both', expand=True, padx=5, pady=5)

        # –í–∫–ª–∞–¥–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        self.create_devices_tab(notebook)

        # –í–∫–ª–∞–¥–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.create_settings_tab(notebook)

    def create_devices_tab(self, notebook):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        devices_frame = ttk.Frame(notebook)
        notebook.add(devices_frame, text="–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞")

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        tk.Label(devices_frame, text="–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞",
                 font=('Arial', 12, 'bold'), bg='#ecf0f1').pack(pady=10)

        # –°–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        self.devices_tree = ttk.Treeview(
            devices_frame, columns=('IP', 'Port'), show='tree headings')
        self.devices_tree.heading('#0', text='–ò–º—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞')
        self.devices_tree.heading('IP', text='IP –∞–¥—Ä–µ—Å')
        self.devices_tree.heading('Port', text='–ü–æ—Ä—Ç')
        self.devices_tree.column('#0', width=150)
        self.devices_tree.column('IP', width=120)
        self.devices_tree.column('Port', width=80)
        self.devices_tree.pack(fill='both', expand=True, padx=10, pady=5)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        btn_frame = tk.Frame(devices_frame)
        btn_frame.pack(fill='x', padx=10, pady=5)

        ttk.Button(btn_frame, text="–û–±–Ω–æ–≤–∏—Ç—å", style='Action.TButton',
                   command=self.refresh_devices).pack(side='left', padx=5)
        ttk.Button(btn_frame, text="–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è", style='Success.TButton',
                   command=self.connect_to_device).pack(side='right', padx=5)

    def create_settings_tab(self, notebook):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        settings_frame = ttk.Frame(notebook)
        notebook.add(settings_frame, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏")

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_frame = tk.LabelFrame(settings_frame, text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
                                   font=('Arial', 11, 'bold'), bg='#ecf0f1')
        user_frame.pack(fill='x', padx=10, pady=10)

        tk.Label(user_frame, text="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
                 bg='#ecf0f1').pack(anchor='w', padx=10, pady=5)
        username_entry = tk.Entry(
            user_frame, textvariable=self.username, width=25)
        username_entry.pack(padx=10, pady=5)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
        info_frame = tk.LabelFrame(settings_frame, text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ",
                                   font=('Arial', 11, 'bold'), bg='#ecf0f1')
        info_frame.pack(fill='x', padx=10, pady=10)

        self.local_ip_var = tk.StringVar()
        tk.Label(info_frame, text="–õ–æ–∫–∞–ª—å–Ω—ã–π IP:", bg='#ecf0f1').pack(
            anchor='w', padx=10, pady=2)
        tk.Label(info_frame, textvariable=self.local_ip_var,
                 bg='#ecf0f1', fg='#2980b9').pack(anchor='w', padx=20, pady=2)

        self.port_var = tk.StringVar()
        tk.Label(info_frame, text="–ü–æ—Ä—Ç:", bg='#ecf0f1').pack(
            anchor='w', padx=10, pady=2)
        tk.Label(info_frame, textvariable=self.port_var, bg='#ecf0f1',
                 fg='#2980b9').pack(anchor='w', padx=20, pady=2)

    def start_services(self):
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"""
        def run_services():
            try:
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ IP
                local_ip = self.get_local_ip()
                if local_ip:
                    self.local_ip_var.set(local_ip)

                    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞
                    port = self.get_free_port()
                    self.port_var.set(str(port))

                    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
                    self.discovery_service = DiscoveryService(
                        f"LANChat_{port}",
                        port,
                        local_ip
                    )
                    initialize_discovery(self.discovery_service)
                    self.discovery_service.start_advertising()
                    self.discovery_service.start_discovery()

                    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —à–∏—Ä–æ–∫–æ–≤–µ—â–∞—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
                    self.message_broadcaster = MessageBroadcaster()

                    self.status_var.set("–°–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã")
                    print("–í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω—ã")

                    # –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤
                    self.refresh_devices()

                    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è
                    self.update_status_indicator()

                else:
                    self.status_var.set(
                        "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π IP")
                    print("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π IP")

            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤: {e}"
                self.status_var.set(error_msg)
                print(error_msg)
                messagebox.showerror(
                    "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã: {e}")

        # –ó–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        service_thread = threading.Thread(target=run_services, daemon=True)
        service_thread.start()

    def get_local_ip(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ IP"""
        try:
            hostname = socket.gethostname()
            ip_list = socket.gethostbyname_ex(hostname)[2]
            for ip in ip_list:
                if ip.startswith("192.168."):
                    return ip
            return ip_list[0] if ip_list else None
        except:
            return None

    def get_free_port(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞"""
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.bind(('', 0))
            return s.getsockname()[1]

    def toggle_chat(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–∞—Ç–∞"""
        if not self.is_chat_active:
            self.start_chat()
        else:
            self.stop_chat()

    def start_chat(self):
        """–ó–∞–ø—É—Å–∫ —á–∞—Ç–∞"""
        if not self.username.get().strip():
            messagebox.showwarning(
                "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return

        self.is_chat_active = True
        self.chat_btn.config(text="–û—Ç–∫–ª—é—á–∏—Ç—å—Å—è")
        self.status_var.set("–ß–∞—Ç –∞–∫—Ç–∏–≤–µ–Ω | –°–æ–æ–±—â–µ–Ω–∏–π: 0")

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.update_status_indicator()

        # –ó–∞–ø—É—Å–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
        def receive_messages():
            def handle_message(message, addr):
                if message.get('username') != self.username.get():
                    self.message_queue.put(message)

            try:
                self.message_broadcaster.start(handle_message)

                # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—Ö–æ–¥–µ
                self.message_broadcaster.broadcast({
                    "username": "system",
                    "message": f"{self.username.get()} –≤–æ—à–µ–ª –≤ —á–∞—Ç"
                })

                print("–ü–æ—Ç–æ–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–æ—Ç–æ–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
                self.status_var.set(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —á–∞—Ç–∞: {e}")

        chat_thread = threading.Thread(target=receive_messages, daemon=True)
        chat_thread.start()

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        self.message_queue.put({
            "username": "system",
            "message": f"–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —á–∞—Ç—É –∫–∞–∫ {self.username.get()}"
        })

    def stop_chat(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–∞—Ç–∞"""
        self.is_chat_active = False
        self.chat_btn.config(text="–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è")
        self.status_var.set("–ß–∞—Ç –æ—Ç–∫–ª—é—á–µ–Ω")

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.update_status_indicator()

        if self.message_broadcaster:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã—Ö–æ–¥–µ
            self.message_broadcaster.broadcast({
                "username": "system",
                "message": f"{self.username.get()} –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç"
            })
            self.message_broadcaster.stop()

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        self.message_queue.put({
            "username": "system",
            "message": "–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ —á–∞—Ç"
        })

    def send_message(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        message = self.message_var.get().strip()
        if not message:
            return

        if not self.is_chat_active:
            messagebox.showwarning(
                "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ —á–∞—Ç—É")
            return

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        if self.message_broadcaster:
            self.message_broadcaster.broadcast({
                "username": self.username.get(),
                "message": message
            })

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —á–∞—Ç
        self.add_message(self.username.get(), message)
        self.message_var.set("")

    def add_message(self, username, message):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç"""
        try:
            timestamp = datetime.now().strftime("%H:%M")
            formatted_message = f"[{timestamp}] {username}: {message}\n"

            # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤–∏–¥–∂–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω
            if hasattr(self, 'messages_text') and self.messages_text:
                self.messages_text.insert('end', formatted_message)
                self.messages_text.see('end')

                # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (—É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ, –µ—Å–ª–∏ –±–æ–ª—å—à–µ 1000 —Å—Ç—Ä–æ–∫)
                lines = int(self.messages_text.index('end-1c').split('.')[0])
                if lines > 1000:
                    # –£–¥–∞–ª—è–µ–º –ø–µ—Ä–≤—ã–µ 200 —Å—Ç—Ä–æ–∫, –æ—Å—Ç–∞–≤–ª—è—è 800
                    self.messages_text.delete('1.0', '200.0')
            else:
                print(f"–û—à–∏–±–∫–∞: –≤–∏–¥–∂–µ—Ç messages_text –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            # –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            try:
                self.force_update()
            except:
                pass

    def add_system_message(self, message):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            if hasattr(self, 'messages_text') and self.messages_text:
                last_line = self.messages_text.get(
                    'end-2c linestart', 'end-1c')
                if last_line.strip() == f"–°–∏—Å—Ç–µ–º–∞: {message}":
                    return  # –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

                timestamp = datetime.now().strftime("%H:%M")
                formatted_message = f"[{timestamp}] –°–∏—Å—Ç–µ–º–∞: {message}\n"

                self.messages_text.insert('end', formatted_message, 'system')
                self.messages_text.tag_config('system', foreground='#7f8c8d')
                self.messages_text.see('end')

                # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (—É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ, –µ—Å–ª–∏ –±–æ–ª—å—à–µ 1000 —Å—Ç—Ä–æ–∫)
                lines = int(self.messages_text.index('end-1c').split('.')[0])
                if lines > 1000:
                    # –£–¥–∞–ª—è–µ–º –ø–µ—Ä–≤—ã–µ 200 —Å—Ç—Ä–æ–∫, –æ—Å—Ç–∞–≤–ª—è—è 800
                    self.messages_text.delete('1.0', '200.0')
            else:
                print(f"–û—à–∏–±–∫–∞: –≤–∏–¥–∂–µ—Ç messages_text –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            # –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            try:
                self.force_update()
            except:
                pass

    def refresh_devices(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        if not self.discovery_service:
            return

        # –û—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–∞
        for item in self.devices_tree.get_children():
            self.devices_tree.delete(item)

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        devices = self.discovery_service.devices
        for device in devices:
            self.devices_tree.insert('', 'end', text=device['name'],
                                     values=(device['ip'], device['port']))

        self.status_var.set(f"–ù–∞–π–¥–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {len(devices)}")

    def connect_to_device(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É"""
        selection = self.devices_tree.selection()
        if not selection:
            messagebox.showwarning(
                "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
            return

        device = self.devices_tree.item(selection[0])
        device_name = device['text']
        device_ip = device['values'][0]
        device_port = device['values'][1]

        messagebox.showinfo(
            "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {device_name} ({device_ip}:{device_port})")

    def clear_chat(self):
        """–û—á–∏—Å—Ç–∫–∞ —á–∞—Ç–∞"""
        try:
            if hasattr(self, 'messages_text') and self.messages_text:
                self.messages_text.delete('1.0', 'end')
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é
                timestamp = datetime.now().strftime("%H:%M")
                formatted_message = f"[{timestamp}] –°–∏—Å—Ç–µ–º–∞: –ß–∞—Ç –æ—á–∏—â–µ–Ω\n"
                self.messages_text.insert('end', formatted_message, 'system')
                self.messages_text.tag_config('system', foreground='#7f8c8d')
                self.messages_text.see('end')
            else:
                print(f"–û—à–∏–±–∫–∞: –≤–∏–¥–∂–µ—Ç messages_text –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —á–∞—Ç–∞: {e}")
            # –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            try:
                self.force_update()
            except:
                pass

    def add_test_messages_to_queue(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            import time
            timestamp = time.strftime("%H:%M:%S")

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –æ—á–µ—Ä–µ–¥—å
            test_messages = [
                {"username": "–¢–µ—Å—Ç1", "message": f"–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ 1 –≤ {timestamp}"},
                {"username": "–¢–µ—Å—Ç2", "message": f"–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ 2 –≤ {timestamp}"},
                {"username": "–¢–µ—Å—Ç3", "message": f"–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ 3 –≤ {timestamp}"},
                {"username": "system",
                    "message": f"–¢–µ—Å—Ç–æ–≤–æ–µ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ {timestamp}"},
                {"username": "–¢–µ—Å—Ç4", "message": f"–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ 4 –≤ {timestamp}"},
                {"username": "–¢–µ—Å—Ç5", "message": f"–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ 5 –≤ {timestamp}"}
            ]

            for msg in test_messages:
                self.message_queue.put(msg)

            print(
                f"–î–æ–±–∞–≤–ª–µ–Ω–æ {len(test_messages)} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –æ—á–µ—Ä–µ–¥—å")
            self.status_var.set(
                f"–î–æ–±–∞–≤–ª–µ–Ω–æ {len(test_messages)} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")

        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}"
            print(error_msg)
            self.status_var.set(error_msg)

    def diagnose_chat_issues(self):
        """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            print("=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ß–ê–¢–ê ===")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–∏–¥–∂–µ—Ç–∞ —á–∞—Ç–∞
            if hasattr(self, 'messages_text') and self.messages_text:
                print("‚úì –í–∏–¥–∂–µ—Ç —á–∞—Ç–∞ –¥–æ—Å—Ç—É–ø–µ–Ω")

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–æ–∫
                try:
                    lines = int(self.messages_text.index(
                        'end-1c').split('.')[0])
                    print(f"‚úì –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ —á–∞—Ç–µ: {lines}")
                except:
                    print("‚úó –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫")

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
                try:
                    content = self.messages_text.get('1.0', 'end-1c')
                    if content.strip():
                        print(f"‚úì –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —á–∞—Ç–∞: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å–∏–º–≤–æ–ª–æ–≤
                        last_content = content[-100:] if len(
                            content) > 100 else content
                        print(f"  –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã: {repr(last_content)}")
                    else:
                        print("‚úó –ß–∞—Ç –ø—É—Å—Ç")
                except:
                    print("‚úó –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —á–∞—Ç–∞")
            else:
                print("‚úó –í–∏–¥–∂–µ—Ç —á–∞—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
            try:
                queue_size = self.message_queue.qsize()
                print(f"‚úì –†–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {queue_size}")
            except:
                print("‚úó –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–∞—Ç–∞
            print(
                f"‚úì –°–æ—Å—Ç–æ—è–Ω–∏–µ —á–∞—Ç–∞: {'–∞–∫—Ç–∏–≤–µ–Ω' if self.is_chat_active else '–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω'}")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
            print(
                f"‚úì Discovery —Å–µ—Ä–≤–∏—Å: {'–¥–æ—Å—Ç—É–ø–µ–Ω' if self.discovery_service else '–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}")
            print(
                f"‚úì Broadcaster: {'–¥–æ—Å—Ç—É–ø–µ–Ω' if self.message_broadcaster else '–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}")

            print("=== –ö–û–ù–ï–¶ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò ===")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å—Ç–∞—Ç—É—Å–µ
            self.status_var.set("–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å")

        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}"
            print(error_msg)
            self.status_var.set(error_msg)

    def force_refresh_chat(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —á–∞—Ç–∞"""
        try:
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–∞ —á–∞—Ç–∞
            if hasattr(self, 'messages_text') and self.messages_text:
                self.messages_text.update_idletasks()
                self.messages_text.update()

                # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
                self.messages_text.see('end')

                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
                lines = int(self.messages_text.index('end-1c').split('.')[0])
                self.status_var.set(f"–ß–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω | –°–æ–æ–±—â–µ–Ω–∏–π: {lines}")

                print(
                    f"–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —á–∞—Ç–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω. –°–æ–æ–±—â–µ–Ω–∏–π: {lines}")
            else:
                print("–í–∏–¥–∂–µ—Ç —á–∞—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞: {e}"
            print(error_msg)
            self.status_var.set(error_msg)

    def start_queue_monitoring(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            if not hasattr(self, 'queue_monitoring_active'):
                self.queue_monitoring_active = False

            if not self.queue_monitoring_active:
                self.queue_monitoring_active = True

                def monitor_queue():
                    while self.queue_monitoring_active:
                        try:
                            queue_size = self.message_queue.qsize()
                            if queue_size > 0:
                                print(
                                    f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: –≤ –æ—á–µ—Ä–µ–¥–∏ {queue_size} —Å–æ–æ–±—â–µ–Ω–∏–π")

                                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
                                if hasattr(self, 'status_var'):
                                    self.status_var.set(
                                        f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: {queue_size} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –æ—á–µ—Ä–µ–¥–∏")

                            import time
                            time.sleep(5)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥

                        except Exception as e:
                            print(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—á–µ—Ä–µ–¥–∏: {e}")
                            break

                monitor_thread = threading.Thread(
                    target=monitor_queue, daemon=True)
                monitor_thread.start()

                print("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω")
                self.status_var.set("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–ø—É—â–µ–Ω")
            else:
                self.queue_monitoring_active = False
                print("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                self.status_var.set("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—á–µ—Ä–µ–¥–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—á–µ—Ä–µ–¥–∏: {e}")

    def force_refresh_devices(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        try:
            if self.discovery_service:
                # –û—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–∞
                for item in self.devices_tree.get_children():
                    self.devices_tree.delete(item)

                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                self.discovery_service.refresh_devices()

                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
                devices = self.discovery_service.devices
                for device in devices:
                    self.devices_tree.insert('', 'end', text=device['name'],
                                             values=(device['ip'], device['port']))

                self.status_var.set(f"–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {len(devices)}")
                print(
                    f"–°–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω: {len(devices)} —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
            else:
                self.status_var.set("–°–µ—Ä–≤–∏—Å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                print("–°–µ—Ä–≤–∏—Å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {e}"
            print(error_msg)
            self.status_var.set(error_msg)

    def restart_services(self):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤"""
        try:
            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
            if self.discovery_service:
                self.discovery_service.stop()
                self.discovery_service = None

            if self.message_broadcaster:
                self.message_broadcaster.stop()
                self.message_broadcaster = None

            # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            self.is_chat_active = False
            self.chat_btn.config(text="–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è")

            # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
            self.start_services()

            print("–°–µ—Ä–≤–∏—Å—ã –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã")
            self.status_var.set("–°–µ—Ä–≤–∏—Å—ã –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã")

            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è
            self.update_status_indicator()

        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤: {e}"
            print(error_msg)
            self.status_var.set(error_msg)

    def update_status_indicator(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            discovery_ok = self.discovery_service is not None
            broadcaster_ok = self.message_broadcaster is not None
            chat_ok = self.is_chat_active

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç –ª–∞–º–ø–æ—á–∫–∏
            if discovery_ok and broadcaster_ok and chat_ok:
                # –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç - –∑–µ–ª–µ–Ω—ã–π
                self.status_indicator.config(fg='green')
                self.status_indicator.config(text="‚óè")
            elif discovery_ok and broadcaster_ok:
                # –û—Å–Ω–æ–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç, –Ω–æ —á–∞—Ç –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω - –∂–µ–ª—Ç—ã–π
                self.status_indicator.config(fg='orange')
                self.status_indicator.config(text="‚óè")
            else:
                # –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ä–≤–∏—Å–∞–º–∏ - –∫—Ä–∞—Å–Ω—ã–π
                self.status_indicator.config(fg='red')
                self.status_indicator.config(text="‚óè")

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")

    def show_status_tooltip(self, event):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤"""
        try:
            discovery_ok = self.discovery_service is not None
            broadcaster_ok = self.message_broadcaster is not None
            chat_ok = self.is_chat_active

            status_text = f"Discovery: {'‚úì' if discovery_ok else '‚úó'}\n"
            status_text += f"Broadcaster: {'‚úì' if broadcaster_ok else '‚úó'}\n"
            status_text += f"Chat: {'‚úì' if chat_ok else '‚úó'}"

            self.status_var.set(status_text)
        except:
            pass

    def hide_status_tooltip(self, event):
        """–°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤"""
        try:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ã—á–Ω—ã–π —Å—Ç–∞—Ç—É—Å
            if self.is_chat_active:
                try:
                    lines = int(self.messages_text.index(
                        'end-1c').split('.')[0])
                    files_count = len(self.file_messages)
                    self.status_var.set(
                        f"–ß–∞—Ç –∞–∫—Ç–∏–≤–µ–Ω | –°–æ–æ–±—â–µ–Ω–∏–π: {lines} | –§–∞–π–ª–æ–≤: {files_count}")
                except:
                    self.status_var.set("–ß–∞—Ç –∞–∫—Ç–∏–≤–µ–Ω")
            else:
                self.status_var.set("–ß–∞—Ç –æ—Ç–∫–ª—é—á–µ–Ω")
        except:
            pass

    def check_queue_status(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            queue_size = self.message_queue.qsize()
            print(f"–†–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {queue_size}")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Å—Ç–∞—Ç—É—Å–µ
            if hasattr(self, 'status_var'):
                self.status_var.set(f"–†–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏: {queue_size}")

            return queue_size
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—á–µ—Ä–µ–¥–∏: {e}")
            return 0

    def test_messages(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            self.add_message("–¢–µ—Å—Ç", "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            self.add_system_message("–¢–µ—Å—Ç–æ–≤–æ–µ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            self.add_message("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "–ï—â–µ –æ–¥–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            print("–¢–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω—ã")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

    def force_update(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        try:
            self.root.update_idletasks()
            self.root.update()

            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–∞ —á–∞—Ç–∞
            if hasattr(self, 'messages_text') and self.messages_text:
                self.messages_text.update_idletasks()
                self.messages_text.update()

            print("–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")

    def update_gui(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ GUI"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤–∏–¥–∂–µ—Ç–æ–≤
        if not hasattr(self, 'messages_text') or not self.messages_text:
            # –ï—Å–ª–∏ –≤–∏–¥–∂–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            self.root.after(100, self.update_gui)
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏
        try:
            message_count = 0
            while True:
                message = self.message_queue.get_nowait()
                username = message.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                message_text = message.get('message', '')

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤—ã–º
                if 'file_info' in message:
                    self.handle_incoming_file(username, message['file_info'])
                elif username == 'system':
                    self.add_system_message(message_text)
                else:
                    self.add_message(username, message_text)
                message_count += 1

                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –æ–¥–∏–Ω —Ü–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                if message_count > 50:
                    break

        except queue.Empty:
            pass
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            # –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            try:
                self.status_var.set(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            except:
                pass

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å—Ç–∞—Ç—É—Å–µ
        if self.is_chat_active:
            try:
                lines = int(self.messages_text.index('end-1c').split('.')[0])
                files_count = len(self.file_messages)
                self.status_var.set(
                    f"–ß–∞—Ç –∞–∫—Ç–∏–≤–µ–Ω | –°–æ–æ–±—â–µ–Ω–∏–π: {lines} | –§–∞–π–ª–æ–≤: {files_count}")
            except:
                pass

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞–∂–¥—ã–µ 10 —Ü–∏–∫–ª–æ–≤ (–ø—Ä–∏–º–µ—Ä–Ω–æ —Ä–∞–∑ –≤ —Å–µ–∫—É–Ω–¥—É)
        if not hasattr(self, '_update_counter'):
            self._update_counter = 0
        self._update_counter += 1

        if self._update_counter >= 10:
            self.update_status_indicator()
            self._update_counter = 0

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 100–º—Å
        self.root.after(100, self.update_gui)

    def debug_refresh(self):
        """–û—Ç–ª–∞–¥–æ—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        try:
            print("=== –û–¢–õ–ê–î–û–ß–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï ===")

            # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            print(f"1. –°–æ—Å—Ç–æ—è–Ω–∏–µ —á–∞—Ç–∞: {self.is_chat_active}")
            print(f"2. –†–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏: {self.message_queue.qsize()}")
            print(f"3. Discovery —Å–µ—Ä–≤–∏—Å: {self.discovery_service is not None}")
            print(f"4. Broadcaster: {self.message_broadcaster is not None}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–∂–µ—Ç —á–∞—Ç–∞
            if hasattr(self, 'messages_text') and self.messages_text:
                try:
                    lines = int(self.messages_text.index(
                        'end-1c').split('.')[0])
                    print(f"6. –°—Ç—Ä–æ–∫ –≤ —á–∞—Ç–µ: {lines}")

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                    content = self.messages_text.get('1.0', 'end-1c')
                    if content.strip():
                        print(f"7. –°–∏–º–≤–æ–ª–æ–≤ –≤ —á–∞—Ç–µ: {len(content)}")
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 200 —Å–∏–º–≤–æ–ª–æ–≤
                        last_content = content[-200:] if len(
                            content) > 200 else content
                        print(f"8. –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã: {repr(last_content)}")
                    else:
                        print("7. –ß–∞—Ç –ø—É—Å—Ç")
                        print("8. –ù–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                except Exception as e:
                    print(f"6. –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —á–∞—Ç–∞: {e}")
                    print("7. –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
                    print("8. –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
            else:
                print("6. –í–∏–¥–∂–µ—Ç —á–∞—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                print("7. –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
                print("8. –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Ç–æ–∫–æ–≤
            print(f"9. –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤: {threading.active_count()}")

            # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            print("10. –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ...")
            self.force_refresh_all()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if hasattr(self, 'messages_text') and self.messages_text:
                try:
                    lines_after = int(
                        self.messages_text.index('end-1c').split('.')[0])
                    print(f"11. –°—Ç—Ä–æ–∫ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {lines_after}")
                except:
                    print("11. –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
            else:
                print("11. –í–∏–¥–∂–µ—Ç —á–∞—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")

            print("=== –û–¢–õ–ê–î–û–ß–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û ===")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å—Ç–∞—Ç—É—Å–µ
            self.status_var.set("–û—Ç–ª–∞–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å")

        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}"
            print(error_msg)
            self.status_var.set(error_msg)

    def recovery_refresh(self):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        try:
            print("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            issues_found = []

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–∂–µ—Ç–∞ —á–∞—Ç–∞
            if not hasattr(self, 'messages_text') or not self.messages_text:
                issues_found.append("–í–∏–¥–∂–µ—Ç —á–∞—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                print("–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–∏–¥–∂–µ—Ç —á–∞—Ç–∞...")
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            else:
                print("–í–∏–¥–∂–µ—Ç —á–∞—Ç–∞ –¥–æ—Å—Ç—É–ø–µ–Ω")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
            try:
                queue_size = self.message_queue.qsize()
                if queue_size > 100:
                    issues_found.append(f"–û—á–µ—Ä–µ–¥—å –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞: {queue_size}")
                    print("–û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–Ω—É—é –æ—á–µ—Ä–µ–¥—å...")
                    # –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å–æ–æ–±—â–µ–Ω–∏–π
                    temp_queue = queue.Queue()
                    count = 0
                    while not self.message_queue.empty() and count < 50:
                        try:
                            msg = self.message_queue.get_nowait()
                            temp_queue.put(msg)
                            count += 1
                        except:
                            break
                    self.message_queue = temp_queue
                    print(f"–û—á–µ—Ä–µ–¥—å –æ—á–∏—â–µ–Ω–∞, –æ—Å—Ç–∞–≤–ª–µ–Ω–æ {count} —Å–æ–æ–±—â–µ–Ω–∏–π")
            except:
                issues_found.append("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—á–µ—Ä–µ–¥–∏")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–∞—Ç–∞
            if self.is_chat_active and not self.message_broadcaster:
                issues_found.append("Broadcaster –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–º —á–∞—Ç–µ")
                print("–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º broadcaster...")
                try:
                    self.message_broadcaster = MessageBroadcaster()
                    print("Broadcaster –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å broadcaster: {e}")

            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            self.force_refresh_all()

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if issues_found:
                issues_text = "; ".join(issues_found)
                self.status_var.set(
                    f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ü—Ä–æ–±–ª–µ–º—ã: {issues_text}")
                print(
                    f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã: {issues_text}")
            else:
                self.status_var.set(
                    "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ü—Ä–æ–±–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                print("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ü—Ä–æ–±–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}"
            print(error_msg)
            self.status_var.set(error_msg)

    def smart_refresh(self):
        """–£–º–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        try:
            print("–£–º–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–∞—Ç–∞
            if self.is_chat_active:
                print("–ß–∞—Ç –∞–∫—Ç–∏–≤–µ–Ω - –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
                self.force_refresh_all()
            else:
                print("–ß–∞—Ç –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω - –≤—ã–ø–æ–ª–Ω—è–µ–º –±–∞–∑–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
                self.root.update_idletasks()
                self.root.update()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
            try:
                queue_size = self.message_queue.qsize()
                if queue_size > 0:
                    print(
                        f"–í –æ—á–µ—Ä–µ–¥–∏ {queue_size} —Å–æ–æ–±—â–µ–Ω–∏–π - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º")
                    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
                    self.update_gui()
                else:
                    print("–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞")
            except:
                print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–∞ —á–∞—Ç–∞
            if hasattr(self, 'messages_text') and self.messages_text:
                try:
                    lines = int(self.messages_text.index(
                        'end-1c').split('.')[0])
                    print(f"–í —á–∞—Ç–µ {lines} —Å—Ç—Ä–æ–∫")
                    self.status_var.set(
                        f"–£–º–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ | –°—Ç—Ä–æ–∫: {lines}")
                except:
                    print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫")
                    self.status_var.set("–£–º–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            else:
                print("–í–∏–¥–∂–µ—Ç —á–∞—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                self.status_var.set("–£–º–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

            print("–£–º–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ —É–º–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}"
            print(error_msg)
            self.status_var.set(error_msg)

    def progress_refresh(self, steps=10, step_delay=100):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º"""
        try:
            print(f"–ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {steps} —à–∞–≥–æ–≤ –ø–æ {step_delay}–º—Å")
            self.status_var.set(f"–ü—Ä–æ–≥—Ä–µ—Å—Å: 0/{steps}")

            def step_update(step):
                if step < steps:
                    try:
                        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
                        if step == 0:
                            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
                            self.root.update_idletasks()
                            self.root.update()
                        elif step == 1:
                            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–∞ —á–∞—Ç–∞
                            if hasattr(self, 'messages_text') and self.messages_text:
                                self.messages_text.update_idletasks()
                                self.messages_text.update()
                        elif step == 2:
                            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
                            if hasattr(self, 'devices_tree') and self.devices_tree:
                                self.devices_tree.update_idletasks()
                                self.devices_tree.update()
                        elif step == 3:
                            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ—Ä–µ–π–º–æ–≤
                            for child in self.root.winfo_children():
                                try:
                                    child.update_idletasks()
                                    child.update()
                                except:
                                    pass
                        elif step == 4:
                            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
                            if self.is_chat_active and hasattr(self, 'messages_text') and self.messages_text:
                                try:
                                    lines = int(self.messages_text.index(
                                        'end-1c').split('.')[0])
                                    self.status_var.set(
                                        f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {step+1}/{steps} | –°–æ–æ–±—â–µ–Ω–∏–π: {lines}")
                                except:
                                    self.status_var.set(
                                        f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {step+1}/{steps}")
                            else:
                                self.status_var.set(
                                    f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {step+1}/{steps}")
                        else:
                            # –û–±—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                            self.root.update_idletasks()
                            self.root.update()
                            self.status_var.set(f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {step+1}/{steps}")

                        # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
                        self.root.after(
                            step_delay, lambda: step_update(step + 1))

                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –Ω–∞ —à–∞–≥–µ {step}: {e}")
                        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ —Å–ª–µ–¥—É—é—â–∏–º —à–∞–≥–æ–º
                        self.root.after(
                            step_delay, lambda: step_update(step + 1))
                else:
                    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                    self.status_var.set("–ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
                    print("–ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π —à–∞–≥
            step_update(0)

        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}"
            print(error_msg)
            self.status_var.set(error_msg)

    def start_continuous_refresh(self, interval_ms=500):
        """–ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        try:
            if not hasattr(self, 'continuous_refresh_active'):
                self.continuous_refresh_active = False

            if not self.continuous_refresh_active:
                self.continuous_refresh_active = True

                def continuous_update():
                    if self.continuous_refresh_active:
                        try:
                            self.force_refresh_all()
                            # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                            self.root.after(interval_ms, continuous_update)
                        except Exception as e:
                            print(f"–û—à–∏–±–∫–∞ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
                            self.continuous_refresh_active = False

                # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                self.root.after(interval_ms, continuous_update)

                print(
                    f"–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º {interval_ms}–º—Å")
                self.status_var.set(f"–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {interval_ms}–º—Å")
            else:
                self.continuous_refresh_active = False
                print("–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                self.status_var.set("–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}"
            print(error_msg)
            self.status_var.set(error_msg)

    def delayed_refresh(self, delay_ms=1000):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π"""
        try:
            print(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —á–µ—Ä–µ–∑ {delay_ms}–º—Å...")
            self.status_var.set(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {delay_ms//1000}—Å...")

            def delayed_update():
                try:
                    self.force_refresh_all()
                    print("–û—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")

            # –ó–∞–ø—É—Å–∫ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            self.root.after(delay_ms, delayed_update)

        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}"
            print(error_msg)
            self.status_var.set(error_msg)

    def browse_file_for_chat(self):
        """–í—ã–±–æ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç"""
        filename = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç")
        if filename:
            self.add_file_message(filename)

    def add_file_message(self, file_path):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ñ–∞–π–ª–µ –≤ —á–∞—Ç"""
        try:
            file_name = os.path.basename(file_path)
            file_size = os.path.getsize(file_path)
            file_type = mimetypes.guess_type(file_path)[0] or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø"

            # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª –≤ –ø–∞–ø–∫—É uploads
            dest_path = self.uploads_folder / file_name
            # –ù–µ –∫–æ–ø–∏—Ä—É–µ–º, –µ—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ –≤ –ø–∞–ø–∫–µ uploads
            if file_path != str(dest_path):
                shutil.copy2(file_path, dest_path)

            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —Ñ–∞–π–ª–∞
            file_id = f"file_{len(self.file_messages)}_{int(datetime.now().timestamp())}"
            self.file_messages[file_id] = {
                'name': file_name,
                'path': str(dest_path),
                'size': file_size,
                'type': file_type,
                'timestamp': datetime.now()
            }

            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ñ–∞–π–ª–µ –≤ —á–∞—Ç
            timestamp = datetime.now().strftime("%H:%M")
            formatted_message = f"[{timestamp}] üìé {self.username.get()} –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–∞–π–ª: {file_name} ({file_size} –±–∞–π—Ç, {file_type})\n"

            if hasattr(self, 'messages_text') and self.messages_text:
                # –í—Å—Ç–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                start_pos = self.messages_text.index('end-1c')
                self.messages_text.insert('end', formatted_message)

                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥ –¥–ª—è –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏ —Ñ–∞–π–ª–∞
                file_start = f"{start_pos} linestart"
                file_end = f"{start_pos} lineend"
                self.messages_text.tag_add(file_id, file_start, file_end)
                self.messages_text.tag_config(
                    file_id, foreground='#2980b9', underline=True)
                self.messages_text.tag_bind(
                    file_id, '<Button-1>', lambda e, fname=file_name: self.download_file_from_chat(fname))
                self.messages_text.tag_bind(
                    file_id, '<Enter>', lambda e, fname=file_name: self.show_file_tooltip(e, fname))
                self.messages_text.tag_bind(
                    file_id, '<Leave>', lambda e: self.hide_file_tooltip())

                self.messages_text.see('end')

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            if self.message_broadcaster and self.is_chat_active:
                self.message_broadcaster.broadcast({
                    "username": self.username.get(),
                    "message": f"–æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–∞–π–ª: {file_name}",
                    "file_info": {
                        'name': file_name,
                        'size': file_size,
                        'type': file_type
                    }
                })

            print(f"–§–∞–π–ª {file_name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç")

        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}"
            print(error_msg)
            messagebox.showerror("–û—à–∏–±–∫–∞", error_msg)

    def handle_incoming_file(self, username, file_info):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ —Ñ–∞–π–ª–∞ –æ—Ç –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            file_name = file_info.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∞–π–ª')
            file_size = file_info.get('size', 0)
            file_type = file_info.get('type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø')

            timestamp = datetime.now().strftime("%H:%M")
            formatted_message = f"[{timestamp}] üì• {username} –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–∞–π–ª: {file_name} ({file_size} –±–∞–π—Ç, {file_type})\n"

            # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤–∏–¥–∂–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω
            if hasattr(self, 'messages_text') and self.messages_text:
                # –í—Å—Ç–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                start_pos = self.messages_text.index('end-1c')
                self.messages_text.insert('end', formatted_message)

                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥ –¥–ª—è —Ñ–∞–π–ª–∞
                file_id = f"incoming_file_{len(self.file_messages)}_{int(datetime.now().timestamp())}"
                self.file_messages[file_id] = {
                    'name': file_name,
                    'path': str(self.uploads_folder / file_name),
                    'size': file_size,
                    'type': file_type,
                    'timestamp': datetime.now()
                }

                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥ –¥–ª—è –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏ —Ñ–∞–π–ª–∞
                file_start = f"{start_pos} linestart"
                file_end = f"{start_pos} lineend"
                self.messages_text.tag_add(file_id, file_start, file_end)
                self.messages_text.tag_config(
                    file_id, foreground='#2980b9', underline=True)
                self.messages_text.tag_bind(
                    file_id, '<Button-1>', lambda e, fname=file_name: self.download_file_from_chat(fname))
                self.messages_text.tag_bind(
                    file_id, '<Enter>', lambda e, fname=file_name: self.show_file_tooltip(e, fname))
                self.messages_text.tag_bind(
                    file_id, '<Leave>', lambda e: self.hide_file_tooltip())

                # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –Ω–æ–≤–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
                self.messages_text.see('end')

                print(f"–í—Ö–æ–¥—è—â–∏–π —Ñ–∞–π–ª {file_name} –æ–±—Ä–∞–±–æ—Ç–∞–Ω")

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–µ–≥–æ —Ñ–∞–π–ª–∞: {e}")

    def download_file_from_chat(self, file_name):
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∑ —á–∞—Ç–∞"""
        try:
            # –ò—â–µ–º —Ñ–∞–π–ª –≤ –ø–∞–ø–∫–µ uploads
            file_path = self.uploads_folder / file_name
            if file_path.exists():
                # –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                save_path = filedialog.asksaveasfilename(
                    title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª –∫–∞–∫",
                    initialfile=file_name,
                    defaultextension=file_path.suffix
                )
                if save_path:
                    shutil.copy2(file_path, save_path)
                    messagebox.showinfo("–£—Å–ø–µ—Ö", f"–§–∞–π–ª {file_name} —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
            else:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–§–∞–π–ª {file_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª: {e}")

    def show_file_tooltip(self, event, file_name):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É –¥–ª—è —Ñ–∞–π–ª–∞"""
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –æ —Ç–æ–º, —á—Ç–æ —Ñ–∞–π–ª –º–æ–∂–Ω–æ —Å–∫–∞—á–∞—Ç—å
            tooltip_text = f"–ö–ª–∏–∫–Ω–∏—Ç–µ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {file_name}"
            self.status_var.set(tooltip_text)
        except:
            pass

    def hide_file_tooltip(self):
        """–°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É –¥–ª—è —Ñ–∞–π–ª–∞"""
        try:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ã—á–Ω—ã–π —Å—Ç–∞—Ç—É—Å
            if self.is_chat_active:
                try:
                    lines = int(self.messages_text.index(
                        'end-1c').split('.')[0])
                    files_count = len(self.file_messages)
                    self.status_var.set(
                        f"–ß–∞—Ç –∞–∫—Ç–∏–≤–µ–Ω | –°–æ–æ–±—â–µ–Ω–∏–π: {lines} | –§–∞–π–ª–æ–≤: {files_count}")
                except:
                    self.status_var.set("–ß–∞—Ç –∞–∫—Ç–∏–≤–µ–Ω")
            else:
                self.status_var.set("–ß–∞—Ç –æ—Ç–∫–ª—é—á–µ–Ω")
        except:
            pass

    def show_files_list(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –≤ —á–∞—Ç–µ"""
        try:
            if not self.file_messages:
                messagebox.showinfo("–§–∞–π–ª—ã", "–í —á–∞—Ç–µ –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤")
                return

            # –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ —Å–æ —Å–ø–∏—Å–∫–æ–º —Ñ–∞–π–ª–æ–≤
            files_window = tk.Toplevel(self.root)
            files_window.title("–§–∞–π–ª—ã –≤ —á–∞—Ç–µ")
            files_window.geometry("600x400")
            files_window.configure(bg='#f0f0f0')

            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            header = tk.Label(files_window, text="–§–∞–π–ª—ã –≤ —á–∞—Ç–µ",
                              font=('Arial', 16, 'bold'), bg='#f0f0f1')
            header.pack(pady=10)

            # –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
            files_frame = tk.Frame(files_window, bg='#f0f0f0')
            files_frame.pack(fill='both', expand=True, padx=20, pady=10)

            # –°–æ–∑–¥–∞–µ–º Treeview –¥–ª—è —Ñ–∞–π–ª–æ–≤
            columns = ('–ò–º—è', '–†–∞–∑–º–µ—Ä', '–¢–∏–ø', '–î–∞—Ç–∞')
            files_tree = ttk.Treeview(
                files_frame, columns=columns, show='headings', height=15)

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫
            files_tree.heading('–ò–º—è', text='–ò–º—è —Ñ–∞–π–ª–∞')
            files_tree.heading('–†–∞–∑–º–µ—Ä', text='–†–∞–∑–º–µ—Ä')
            files_tree.heading('–¢–∏–ø', text='–¢–∏–ø —Ñ–∞–π–ª–∞')
            files_tree.heading('–î–∞—Ç–∞', text='–î–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è')

            files_tree.column('–ò–º—è', width=200)
            files_tree.column('–†–∞–∑–º–µ—Ä', width=100)
            files_tree.column('–¢–∏–ø', width=150)
            files_tree.column('–î–∞—Ç–∞', width=120)

            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –≤ —Å–ø–∏—Å–æ–∫
            for file_id, file_info in self.file_messages.items():
                size_str = f"{file_info['size']} –±–∞–π—Ç"
                date_str = file_info['timestamp'].strftime("%d.%m %H:%M")
                files_tree.insert('', 'end', values=(
                    file_info['name'],
                    size_str,
                    file_info['type'],
                    date_str
                ))

            files_tree.pack(fill='both', expand=True)

            # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            btn_frame = tk.Frame(files_window, bg='#f0f0f0')
            btn_frame.pack(fill='x', padx=20, pady=10)

            ttk.Button(btn_frame, text="–°–∫–∞—á–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π", style='Success.TButton',
                       command=lambda: self.download_selected_file(files_tree)).pack(side='left', padx=5)
            ttk.Button(btn_frame, text="–û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É", style='Action.TButton',
                       command=self.open_uploads_folder).pack(side='left', padx=5)
            ttk.Button(btn_frame, text="–ó–∞–∫—Ä—ã—Ç—å", style='Warning.TButton',
                       command=files_window.destroy).pack(side='right', padx=5)

            # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –¥–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            files_tree.bind(
                '<Double-1>', lambda e: self.download_selected_file(files_tree))

        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤: {e}"
            print(error_msg)
            messagebox.showerror("–û—à–∏–±–∫–∞", error_msg)

    def download_selected_file(self, files_tree):
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∏–∑ —Å–ø–∏—Å–∫–∞"""
        try:
            selection = files_tree.selection()
            if not selection:
                messagebox.showwarning(
                    "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è")
                return

            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
            file_name = files_tree.item(selection[0])['values'][0]
            self.download_file_from_chat(file_name)

        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {e}"
            print(error_msg)
            messagebox.showerror("–û—à–∏–±–∫–∞", error_msg)

    def open_uploads_folder(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –ø–∞–ø–∫–∏ —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏"""
        try:
            import subprocess
            import platform

            if platform.system() == "Windows":
                subprocess.run(['explorer', str(self.uploads_folder)])
            elif platform.system() == "Darwin":  # macOS
                subprocess.run(['open', str(self.uploads_folder)])
            else:  # Linux
                subprocess.run(['xdg-open', str(self.uploads_folder)])

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–∞–ø–∫–∏: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É: {e}")

    def force_refresh_all(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        try:
            print("–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
            self.root.update_idletasks()
            self.root.update()

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–∞ —á–∞—Ç–∞
            if hasattr(self, 'messages_text') and self.messages_text:
                self.messages_text.update_idletasks()
                self.messages_text.update()
                self.messages_text.see('end')

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
            if hasattr(self, 'devices_tree') and self.devices_tree:
                self.devices_tree.update_idletasks()
                self.devices_tree.update()

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ—Ä–µ–π–º–æ–≤
            for child in self.root.winfo_children():
                try:
                    child.update_idletasks()
                    child.update()
                except:
                    pass

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
            if self.is_chat_active and hasattr(self, 'messages_text') and self.messages_text:
                try:
                    lines = int(self.messages_text.index(
                        'end-1c').split('.')[0])
                    self.status_var.set(f"–í—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ | –°–æ–æ–±—â–µ–Ω–∏–π: {lines}")
                except:
                    self.status_var.set("–í—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
            else:
                self.status_var.set("–í—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")

            print("–í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")

        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {e}"
            print(error_msg)
            self.status_var.set(error_msg)


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ GUI"""
    try:
        root = tk.Tk()
        app = LANChatGUI(root)
        root.mainloop()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ GUI: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()
