#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
LANChat Release Creator
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–≥–æ–≤ –∏ —Ä–µ–ª–∏–∑–æ–≤
"""

import os
import sys
import subprocess
import argparse
from pathlib import Path


def run_command(command, check=True):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –∏ –≤–µ—Ä–Ω—É—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    try:
        result = subprocess.run(
            command, 
            shell=True, 
            capture_output=True, 
            text=True, 
            check=check
        )
        return result.stdout.strip()
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}")
        print(f"–ö–æ–º–∞–Ω–¥–∞: {command}")
        print(f"–û—à–∏–±–∫–∞: {e.stderr}")
        if check:
            sys.exit(1)
        return None


def get_current_version():
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é –∏–∑ pyproject.toml"""
    try:
        with open('pyproject.toml', 'r', encoding='utf-8') as f:
            content = f.read()
            for line in content.split('\n'):
                if line.strip().startswith('version = '):
                    version = line.split('=')[1].strip().strip('"').strip("'")
                    return version
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª pyproject.toml –Ω–µ –Ω–∞–π–¥–µ–Ω")
        sys.exit(1)
    return None


def update_version(version_type):
    """–û–±–Ω–æ–≤–∏—Ç—å –≤–µ—Ä—Å–∏—é –≤ pyproject.toml"""
    current_version = get_current_version()
    if not current_version:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é")
        sys.exit(1)
    
    major, minor, patch = map(int, current_version.split('.'))
    
    if version_type == 'major':
        major += 1
        minor = 0
        patch = 0
    elif version_type == 'minor':
        minor += 1
        patch = 0
    elif version_type == 'patch':
        patch += 1
    else:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –≤–µ—Ä—Å–∏–∏: {version_type}")
        sys.exit(1)
    
    new_version = f"{major}.{minor}.{patch}"
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é –≤ pyproject.toml
    try:
        with open('pyproject.toml', 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ó–∞–º–µ–Ω—è–µ–º –≤–µ—Ä—Å–∏—é
        lines = content.split('\n')
        for i, line in enumerate(lines):
            if line.strip().startswith('version = '):
                lines[i] = f'version = "{new_version}"'
                break
        
        with open('pyproject.toml', 'w', encoding='utf-8') as f:
            f.write('\n'.join(lines))
        
        print(f"‚úÖ –í–µ—Ä—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {current_version} ‚Üí {new_version}")
        return new_version
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏: {e}")
        sys.exit(1)


def create_tag(version, message=None):
    """–°–æ–∑–¥–∞—Ç—å —Ç–µ–≥"""
    tag_name = f"v{version}"
    
    if not message:
        message = f"Release {version}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    status = run_command("git status --porcelain", check=False)
    if status:
        print("‚ö†Ô∏è  –ï—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:")
        print(status)
        response = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): ")
        if response.lower() != 'y':
            print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
            sys.exit(1)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    print("üìù –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è...")
    run_command("git add .")
    
    # –ö–æ–º–º–∏—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    print("üíæ –°–æ–∑–¥–∞–µ–º –∫–æ–º–º–∏—Ç...")
    run_command(f'git commit -m "Bump version to {version}"')
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ–≥
    print(f"üè∑Ô∏è  –°–æ–∑–¥–∞–µ–º —Ç–µ–≥ {tag_name}...")
    run_command(f'git tag -a {tag_name} -m "{message}"')
    
    # –ü—É—à–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ —Ç–µ–≥
    print("üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è...")
    run_command("git push")
    run_command(f"git push origin {tag_name}")
    
    print(f"‚úÖ –¢–µ–≥ {tag_name} —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
    return tag_name


def main():
    parser = argparse.ArgumentParser(
        description="LANChat Release Creator - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–æ–≤"
    )
    parser.add_argument(
        'version_type',
        choices=['major', 'minor', 'patch'],
        help='–¢–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏'
    )
    parser.add_argument(
        '--message', '-m',
        help='–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–µ–≥–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)'
    )
    parser.add_argument(
        '--dry-run',
        action='store_true',
        help='–ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ –±–µ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è'
    )
    
    args = parser.parse_args()
    
    print("üöÄ LANChat Release Creator")
    print("=" * 40)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é
    current_version = get_current_version()
    print(f"üìã –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {current_version}")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é
    major, minor, patch = map(int, current_version.split('.'))
    if args.version_type == 'major':
        new_version = f"{major + 1}.0.0"
    elif args.version_type == 'minor':
        new_version = f"{major}.{minor + 1}.0"
    else:  # patch
        new_version = f"{major}.{minor}.{patch + 1}"
    
    print(f"üÜï –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è: {new_version}")
    
    if args.dry_run:
        print("\nüîç –†–µ–∂–∏–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:")
        print(f"  - –û–±–Ω–æ–≤–∏—Ç—å –≤–µ—Ä—Å–∏—é –≤ pyproject.toml: {current_version} ‚Üí {new_version}")
        print(f"  - –°–æ–∑–¥–∞—Ç—å –∫–æ–º–º–∏—Ç: 'Bump version to {new_version}'")
        print(f"  - –°–æ–∑–¥–∞—Ç—å —Ç–µ–≥: v{new_version}")
        if args.message:
            print(f"  - –°–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–≥–∞: {args.message}")
        else:
            print(f"  - –°–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–≥–∞: Release {new_version}")
        print("  - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π")
        print("  - –ó–∞–ø—É—Å—Ç–∏—Ç—å CI/CD pipeline")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é
    update_version(args.version_type)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ–≥
    tag_name = create_tag(new_version, args.message)
    
    print("\nüéâ –†–µ–ª–∏–∑ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
    print(f"üè∑Ô∏è  –¢–µ–≥: {tag_name}")
    print("üîÑ CI/CD pipeline –∑–∞–ø—É—â–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
    print("üì¶ –†–µ–ª–∏–∑ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Å–±–æ—Ä–∫–∏")
    print("\nüí° –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("  1. –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è CI/CD pipeline")
    print("  2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–ª–∏–∑ –Ω–∞ GitHub")
    print("  3. –°–∫–∞—á–∞–π—Ç–µ —Å–æ–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã")


if __name__ == "__main__":
    main()
